----------------------------------------
1 Introduction
----------------------------------------

My name is Adrian Olaru, I'm a JavaScript developer at 1&1 Romania, and core developer at qooxdoo.


----------------------------------------
2 List of Web communication apis
----------------------------------------

Today we will talk about few APIs that I like to call Web Communication APIs. 
These are APIs that originated from HTML5, but now, they are specs in their own right.

Altough all of them are implemented by browsers to some degree, 
all of these specs are work-in-progress, and not a W3C Recommandation yet.

Web Messaging: 
  send messages across domains 
Web Workers: 
  run JavaScript in parallel
SSE: 
  send from the server to the client.
Web Sockets: 
  provides a two-way real-time communication between the server and the client.
CORS: 
  allow cross-domain requests trough xhr object.


----------------------------------------
3  Web Messaging
----------------------------------------

allows documents from different domains to communicate with each other in a secure way.

Web browsers, for security reasons, prevents documents in different domains 
from communicating with each other; that is, cross site scripting is dissalowed. 
This is called Same Origin Policy.

Two pages have the same origin if the protocol, host and port (if one is specified) are the same for both pages.

There's a small escape door for subdomains of the same domain.
A script can set the value of document.domain to a suffix of the current domain.
document.domain = "company.com";

* XSS Attacks

XSS is a security vulnerability that enables attackers to inject client-side 
script into web pages viewed by other users. 


----------------------------------------
4 Browser Support
----------------------------------------



----------------------------------------
5 API 1
----------------------------------------



----------------------------------------
6 API 2
----------------------------------------



----------------------------------------
7 Tips
----------------------------------------


----------------------------------------
8 Web Workers
----------------------------------------

Browsers are effectively single threaded applications, 
in that when JavaScript is running or perhaps being parsed, 
the page isn’t rendering. 

Equally, when JavaScript is performing a long and complicated function, 
the whole browser can be seen to lock up. 

Normally in order to achieve any sort of computation using JavaScript 
you would need to break your jobs up into tiny chunks and 
split their execution apart using timers. But this was just a hack.

Web Workers allow you to run JavaScript in parallel on a web page, without blocking the user interface. 

----------------------------------------
9 Browser Support
----------------------------------------


----------------------------------------
10 API 1
----------------------------------------

A 'worker' is a script that will be loaded and executed in the background. 

----------------------------------------
11 API 2
----------------------------------------

'this' refers to the worker object in workers.

----------------------------------------
12 Workers can't
----------------------------------------


----------------------------------------
13 Workers can
----------------------------------------


----------------------------------------
14 Server Sent Events
----------------------------------------

Server-Sent Events is a way to send data from the server to the browser only. 
It uses the HTTP protocol to send the data.

A web page can subscribe to a stream of events generated by the server.  
Whenever an event occurs on the server, a notification is sent to the client and a JavaScript event is generated.

If you wish to send data to the server, you’ll have to do so through another mechanism, such as XMLHttpRequest.

Note that the referenced URL must be on the same origin (scheme, domain, and port) as the page in which the object is created.

Information sent back from the server is returned via event.data as a string.

Server-Sent events are a simpler alternative to Web Sockets for server push technology. 
you can use sse for streaming stock quotes, score updates for games, bidding updates for auctions, etc. 


----------------------------------------
15 Browser Support
----------------------------------------


----------------------------------------
16 API 1
----------------------------------------


----------------------------------------
17 API 2
----------------------------------------


----------------------------------------
18 Web Sockets
----------------------------------------

Web Sockets give you a bi-directional connection between your
server and the client, the browser. This connection is also real-
time and is permanently open until explicitly closed. 

This means that when the server wants to send your client something, that
message is pushed to your browser immediately.


----------------------------------------
19 Browser Support
----------------------------------------


----------------------------------------
20 API 1
----------------------------------------


----------------------------------------
21 Handshake
----------------------------------------


----------------------------------------
22 Demos & Resources 
----------------------------------------

You can find some simple demos and resources at
github.com/adrianolaru/webcom

----------------------------------------
22
----------------------------------------

Danke

